var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.449,1,1.922]],["body/controllers/AppController.html",[0,2.177,1,2.887,2,1.693,3,0.596,4,0.509,5,0.509,6,2.656,7,0.509,8,1.162,9,3.986,10,2.245,11,0.048,12,0.792,13,3.279,14,0.903,15,1.493,16,0.888,17,0.69,18,2.755,19,3.279,20,0.596,21,0.279,22,2.656,23,1.938,24,1.314,25,3.279,26,0.036,27,0.036]],["title/modules/AppModule.html",[28,1.449,29,1.659]],["body/modules/AppModule.html",[2,1.583,3,0.558,4,0.476,5,0.476,11,0.048,16,0.95,17,0.645,20,0.558,21,0.261,26,0.035,27,0.035,28,2.33,29,3.024,30,1.583,31,1.583,32,2.099,33,2.099,34,1.583,35,2.763,36,2.099,37,2.483,38,2.483,39,2.642,40,2.763,41,2.099,42,2.099,43,3.066,44,3.269,45,3.066,46,2.483,47,1.812,48,3.066]],["title/injectables/AppService.html",[18,1.659,49,0.678]],["body/injectables/AppService.html",[3,0.634,4,0.541,5,0.541,7,0.541,8,1.207,9,4.076,11,0.047,12,0.842,14,0.96,15,1.552,16,0.733,17,0.733,18,2.59,20,0.634,21,0.297,24,1.396,26,0.038,27,0.038,49,1.059,50,1.582,51,2.822,52,3.485,53,3.485,54,3.485]],["title/injectables/AuditMiddleware.html",[49,0.678,55,1.659]],["body/injectables/AuditMiddleware.html",[3,0.511,4,0.437,5,0.437,7,0.437,8,1.05,11,0.046,12,0.679,14,0.775,16,0.802,17,0.592,20,0.511,21,0.24,26,0.033,27,0.033,49,0.921,50,1.277,55,2.252,56,2.277,57,3.811,58,3.811,59,3.017,60,4.322,61,3.171,62,3.752,63,3.5,64,2.812,65,0.996,66,0.996,67,0.679,68,0.879,69,2.277,70,1.662,71,3.811,72,1.452,73,1.277,74,4.322,75,2.959,76,2.812,77,2.812,78,1.662,79,2.812,80,2.812,81,2.812]],["title/injectables/BenchmarkInterceptor.html",[49,0.678,82,1.659]],["body/injectables/BenchmarkInterceptor.html",[3,0.466,4,0.398,5,0.398,7,0.398,8,0.985,11,0.048,12,0.62,14,0.706,16,0.938,17,0.54,20,0.466,21,0.219,24,1.028,26,0.031,27,0.031,49,0.864,50,1.165,59,2.434,62,3.609,65,0.908,66,0.908,67,0.62,68,0.802,72,1.324,73,1.165,82,2.114,83,2.077,84,3.577,85,3.577,86,4.456,87,4.456,88,2.565,89,2.565,90,4.119,91,3.577,92,2.077,93,2.565,94,2.565,95,2.565,96,2.565,97,2.565,98,2.126,99,1.756,100,2.565,101,1.756,102,2.565,103,1.756,104,2.565,105,2.565,106,2.565,107,3.577,108,2.565,109,2.565,110,2.565,111,2.565,112,2.565]],["title/classes/HttpExceptionFilter.html",[21,0.239,113,1.659]],["body/classes/HttpExceptionFilter.html",[3,0.485,4,0.414,5,0.414,7,0.414,8,1.012,11,0.047,12,0.644,14,0.734,16,0.773,17,0.561,20,0.485,21,0.227,26,0.031,27,0.031,59,2.171,61,2.515,65,0.944,66,0.944,67,0.644,68,0.833,70,1.575,72,1.376,73,1.668,78,1.575,98,2.339,99,1.825,101,1.825,103,1.825,113,2.171,114,1.575,115,2.975,116,1.825,117,3.404,118,2.877,119,2.975,120,3.101,121,3.404,122,3.669,123,2.666,124,2.159,125,2.666,126,2.159,127,2.159,128,2.975,129,2.159,130,2.159,131,2.159,132,2.159,133,1.068,134,2.159,135,1.21,136,2.666,137,2.666]],["title/interfaces/Job.html",[138,1.659,139,1.125]],["body/interfaces/Job.html",[3,0.606,4,0.517,5,0.517,7,0.517,11,0.046,15,1.853,20,0.606,26,0.036,27,0.036,67,1.135,68,1.333,138,1.969,139,1.708,140,3.333,141,2.699,142,2.518,143,3.389,144,3.389,145,3.389,146,2.425]],["title/classes/JobDTO.html",[21,0.239,147,1.659]],["body/classes/JobDTO.html",[3,0.474,4,0.405,5,0.405,7,0.405,10,2.477,11,0.047,12,0.874,15,1.59,16,0.762,20,0.474,21,0.308,23,2.883,26,0.031,27,0.031,67,1.084,114,1.542,135,2.038,139,1.799,142,2.139,144,3.228,145,3.228,146,2.317,147,2.139,148,2.113,149,3.619,150,3.619,151,4.489,152,3.635,153,2.609,154,2.609,155,4.156,156,2.609,157,4.156,158,1.786,159,3.619,160,1.786,161,2.609]],["title/controllers/JobsController.html",[0,1.449,162,1.659]],["body/controllers/JobsController.html",[0,0.586,2,0.586,3,0.206,4,0.176,5,0.176,7,0.176,8,0.524,10,2.377,11,0.049,12,0.839,14,0.957,15,1.426,16,0.875,17,0.239,20,0.206,21,0.097,22,0.919,23,0.67,24,1.552,26,0.016,27,0.016,65,1.02,66,1.02,67,0.696,68,0.9,75,1.683,82,1.125,113,0.67,118,0.777,120,0.777,133,0.763,135,1.888,139,1.552,143,2.526,147,2.288,158,0.777,162,1.125,163,0.919,164,1.135,165,1.991,166,1.542,167,1.542,168,2.598,169,2.88,170,1.542,171,0.919,172,1.135,173,4.159,174,4.159,175,1.135,176,4.159,177,1.135,178,3.542,179,0.919,180,1.135,181,1.135,182,1.135,183,1.542,184,1.135,185,1.904,186,1.135,187,1.135,188,1.904,189,1.135,190,1.135,191,1.135,192,0.919,193,1.135,194,1.135,195,1.135,196,1.904,197,1.135,198,1.135,199,1.904,200,1.135,201,1.135,202,1.135,203,1.135,204,1.135,205,1.116,206,0.919,207,1.135,208,0.919,209,1.135,210,1.135,211,0.67,212,1.135,213,0.777,214,1.135,215,1.135,216,1.135,217,1.135,218,0.777,219,0.777,220,1.135,221,1.904,222,3.473,223,3.208,224,1.135,225,1.135,226,1.135,227,1.135,228,1.904,229,1.904,230,1.904,231,1.904,232,1.904,233,1.904,234,2.88,235,1.542,236,1.904,237,1.904,238,1.904,239,1.135,240,1.135,241,1.135,242,1.904,243,1.135,244,1.135,245,1.135,246,1.135,247,1.135,248,1.135,249,1.135,250,1.135,251,1.135,252,1.135,253,1.135,254,1.135,255,1.135,256,1.135,257,1.135]],["title/modules/JobsModule.html",[28,1.449,39,1.449]],["body/modules/JobsModule.html",[2,1.675,3,0.407,4,0.347,5,0.347,8,0.616,11,0.048,12,0.54,14,0.616,16,1.007,17,0.471,20,0.407,21,0.191,26,0.028,27,0.028,28,1.971,30,1.155,31,1.155,32,1.531,33,1.531,34,1.155,35,2.614,36,1.531,39,2.395,40,2.221,41,1.531,42,1.531,44,1.812,46,1.812,47,1.322,55,1.322,65,0.792,66,1.149,67,0.54,68,0.7,70,1.322,73,1.016,78,1.322,139,0.896,146,1.155,162,2.257,165,1.812,205,2.106,206,1.812,218,1.531,219,1.531,258,1.812,259,1.812,260,2.237,261,2.237,262,3.245,263,4.189,264,2.237,265,3.245,266,3.245,267,2.237,268,2.237,269,2.221,270,2.237,271,2.237,272,2.237,273,2.237,274,2.237,275,2.237,276,2.237,277,1.812,278,2.237,279,2.237,280,2.237,281,2.237,282,2.237,283,1.812,284,2.237,285,2.237,286,2.237,287,2.237]],["title/injectables/JobsService.html",[49,0.678,205,1.275]],["body/injectables/JobsService.html",[3,0.329,4,0.281,5,0.281,7,0.281,8,0.763,11,0.048,12,1.036,14,1.119,15,1.671,16,0.794,17,0.381,20,0.329,21,0.154,23,1.068,24,1.629,26,0.024,27,0.024,47,1.068,49,0.669,50,0.821,65,1.439,66,1.439,67,0.982,68,1.271,75,1.895,98,0.933,133,1.109,139,1.991,143,2.581,166,2.242,167,2.242,168,3.053,170,2.242,171,2.242,178,3.9,179,2.242,183,2.242,192,2.242,205,1.257,208,1.464,288,1.464,289,4.156,290,1.808,291,1.808,292,3.77,293,1.808,294,2.769,295,1.808,296,1.808,297,1.808,298,1.808,299,1.808,300,1.464,301,1.808,302,1.808,303,1.464,304,3.291,305,1.808,306,1.808,307,1.808,308,1.808,309,1.808,310,1.808,311,1.808,312,1.808,313,1.808]],["title/classes/ValidationExceptionFilter.html",[21,0.239,314,1.922]],["body/classes/ValidationExceptionFilter.html",[3,0.483,4,0.412,5,0.412,7,0.412,8,1.009,11,0.047,12,0.641,14,0.731,16,0.771,17,0.559,20,0.483,21,0.226,26,0.031,27,0.031,59,2.478,61,2.507,65,0.94,66,0.94,67,0.641,68,0.83,70,1.568,72,1.37,73,1.663,78,1.568,98,2.334,99,1.817,101,1.817,103,1.817,114,1.568,116,1.817,117,3.396,118,2.871,119,2.966,120,3.095,121,3.396,122,3.662,124,2.149,126,2.149,127,2.149,128,2.966,129,2.149,130,2.149,131,2.149,132,2.149,133,1.063,134,2.149,135,1.205,314,2.507,315,2.966,316,2.654,317,2.149,318,2.654,319,2.654]],["title/injectables/ValidationPipe.html",[49,0.678,211,1.659]],["body/injectables/ValidationPipe.html",[3,0.422,4,0.36,5,0.36,7,0.36,8,0.918,11,0.048,12,0.805,14,0.918,15,0.822,16,0.821,17,0.489,20,0.422,21,0.332,24,1.563,26,0.029,27,0.029,49,0.805,50,1.054,65,1.18,66,1.18,67,0.805,68,1.042,73,1.054,98,2.013,133,0.93,146,1.199,160,1.589,211,1.97,235,1.88,289,3.158,303,3.158,304,1.88,317,1.88,320,1.88,321,3.334,322,3.334,323,3.334,324,2.322,325,3.9,326,3.9,327,3.334,328,2.322,329,4.262,330,2.322,331,3.452,332,2.322,333,3.334,334,2.322,335,2.322,336,1.88,337,2.322,338,3.334,339,2.322,340,2.322,341,2.322,342,2.322,343,1.88,344,2.322,345,2.322,346,2.322,347,2.322,348,2.322]],["title/coverage.html",[349,2.606]],["body/coverage.html",[0,1.863,1,1.778,5,0.403,6,2.104,11,0.047,18,1.535,21,0.353,26,0.031,27,0.031,34,1.341,49,1.137,51,2.104,55,1.535,56,2.104,63,2.104,67,0.627,82,1.535,83,2.104,113,1.535,115,2.104,116,2.47,133,1.041,138,1.535,139,1.041,141,2.104,147,1.535,148,2.104,162,1.535,163,2.104,205,1.179,211,1.535,213,1.778,269,1.778,288,2.104,314,1.778,315,2.104,320,2.104,343,4.385,349,1.778,350,2.598,351,2.598,352,2.598,353,4.873,354,2.104,355,3.609,356,4.147,357,3.609,358,2.598,359,3.609,360,2.104,361,2.104,362,2.598,363,2.598]],["title/dependencies.html",[31,1.74,364,1.909]],["body/dependencies.html",[11,0.048,17,0.662,21,0.35,26,0.035,27,0.035,31,1.623,47,1.858,72,2.119,92,2.546,158,2.152,160,2.152,218,2.152,219,2.81,283,2.546,300,2.546,336,2.546,365,3.145,366,4.57,367,3.145,368,3.145,369,3.145,370,3.145,371,3.145,372,3.145,373,3.145,374,3.145,375,3.145,376,3.145,377,3.145,378,3.145,379,3.145,380,3.145,381,3.145,382,3.145,383,3.145,384,3.145,385,3.145]],["title/miscellaneous/functions.html",[386,1.393,387,2.729]],["body/miscellaneous/functions.html",[7,0.639,11,0.042,26,0.042,27,0.042,34,2.664,361,3.334,386,2.433,387,3.334,388,4.117]],["title/index.html",[7,0.366,389,2.357,390,2.357]],["body/index.html",[4,0.408,11,0.047,26,0.031,27,0.031,135,1.195,349,1.801,391,2.631,392,2.631,393,3.641,394,2.631,395,2.631,396,2.631,397,2.631,398,2.631,399,2.631,400,4.175,401,2.631,402,2.631,403,2.631,404,2.631,405,5.016,406,2.631,407,2.631,408,2.631,409,4.893,410,2.631,411,2.631,412,3.641,413,2.631,414,2.631,415,2.631,416,2.631,417,3.641,418,3.641,419,2.631,420,2.631,421,2.631,422,3.641,423,3.641,424,2.631,425,2.631,426,2.631,427,2.631,428,2.631,429,2.131,430,2.631,431,2.631,432,2.631,433,2.631,434,2.631,435,2.631,436,2.631,437,2.631,438,2.631,439,2.631,440,2.131,441,2.631,442,2.631,443,2.631,444,2.631,445,2.631,446,2.631,447,2.131]],["title/modules.html",[30,1.965]],["body/modules.html",[11,0.041,26,0.041,27,0.041,29,2.385,30,2.083,39,2.083,429,3.883,448,4.796,449,4.796,450,4.796]],["title/overview.html",[451,3.083]],["body/overview.html",[2,1.749,11,0.043,26,0.037,27,0.037,28,1.749,29,2.944,30,1.749,31,1.749,32,2.319,33,2.319,34,1.749,35,2.319,36,2.319,37,2.744,38,2.744,39,2.655,40,2.948,41,2.319,42,2.319,50,1.538,114,2.002,138,2.002,205,2.149,258,2.744,259,2.744,277,2.744,451,2.744,452,4.307,453,3.388,454,3.388]],["title/properties.html",[142,1.991,364,1.909]],["body/properties.html",[11,0.047,26,0.041,27,0.041,135,1.832,142,2.385,440,3.268,447,3.268,455,4.036,456,4.036,457,4.036]],["title/miscellaneous/variables.html",[386,1.393,458,2.729]],["body/miscellaneous/variables.html",[7,0.532,11,0.047,15,1.536,24,1.373,26,0.037,27,0.037,69,2.774,133,1.373,144,2.345,145,2.345,146,1.769,152,3.512,213,2.969,269,2.969,331,3.512,354,2.774,360,2.774,386,2.025,458,2.774,459,3.426,460,3.426,461,3.426,462,3.426,463,4.337,464,3.426,465,3.426]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":343,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.1",{"_index":456,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":373,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":454,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":280,"title":{},"body":{"modules/JobsModule.html":{}}}],["2",{"_index":452,"title":{},"body":{"overview.html":{}}}],["2.1.0",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":453,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":161,"title":{},"body":{"classes/JobDTO.html":{}}}],["3000})@isint",{"_index":153,"title":{},"body":{"classes/JobDTO.html":{}}}],["4.2.0",{"_index":375,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":277,"title":{},"body":{"modules/JobsModule.html":{},"overview.html":{}}}],["5.0.0",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":371,"title":{},"body":{"dependencies.html":{}}}],["7.1.8",{"_index":370,"title":{},"body":{"dependencies.html":{}}}],["7.4.4",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":307,"title":{},"body":{"injectables/JobsService.html":{}}}],["amazing",{"_index":430,"title":{},"body":{"index.html":{}}}],["apicreatedresponse",{"_index":221,"title":{},"body":{"controllers/JobsController.html":{}}}],["apiforbiddenresponse",{"_index":222,"title":{},"body":{"controllers/JobsController.html":{}}}],["apiokresponse",{"_index":223,"title":{},"body":{"controllers/JobsController.html":{}}}],["apiproperty",{"_index":157,"title":{},"body":{"classes/JobDTO.html":{}}}],["apiproperty({type",{"_index":149,"title":{},"body":{"classes/JobDTO.html":{}}}],["apitags",{"_index":224,"title":{},"body":{"controllers/JobsController.html":{}}}],["apitags('jobs",{"_index":225,"title":{},"body":{"controllers/JobsController.html":{}}}],["app",{"_index":407,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["applications",{"_index":399,"title":{},"body":{"index.html":{}}}],["apply(auditmiddleware",{"_index":284,"title":{},"body":{"modules/JobsModule.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["argumentmetadata",{"_index":329,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":122,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["array",{"_index":347,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":289,"title":{},"body":{"injectables/JobsService.html":{},"injectables/ValidationPipe.html":{}}}],["auditmiddleware",{"_index":55,"title":{"injectables/AuditMiddleware.html":{}},"body":{"injectables/AuditMiddleware.html":{},"modules/JobsModule.html":{},"coverage.html":{}}}],["author",{"_index":440,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":304,"title":{},"body":{"injectables/JobsService.html":{},"injectables/ValidationPipe.html":{}}}],["backers",{"_index":431,"title":{},"body":{"index.html":{}}}],["bad",{"_index":319,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["badrequestexception",{"_index":317,"title":{},"body":{"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":344,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["benchmarkinterceptor",{"_index":82,"title":{"injectables/BenchmarkInterceptor.html":{}},"body":{"injectables/BenchmarkInterceptor.html":{},"controllers/JobsController.html":{},"coverage.html":{}}}],["body",{"_index":199,"title":{},"body":{"controllers/JobsController.html":{}}}],["boolean",{"_index":326,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":450,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":448,"title":{},"body":{"modules.html":{}}}],["building",{"_index":394,"title":{},"body":{"index.html":{}}}],["cache",{"_index":283,"title":{},"body":{"modules/JobsModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":215,"title":{},"body":{"controllers/JobsController.html":{}}}],["cachekey",{"_index":216,"title":{},"body":{"controllers/JobsController.html":{}}}],["cachekey('alljobs",{"_index":240,"title":{},"body":{"controllers/JobsController.html":{}}}],["cachemodule",{"_index":272,"title":{},"body":{"modules/JobsModule.html":{}}}],["cachemodule.register",{"_index":275,"title":{},"body":{"modules/JobsModule.html":{}}}],["cachettl",{"_index":217,"title":{},"body":{"controllers/JobsController.html":{}}}],["cachettl(25",{"_index":241,"title":{},"body":{"controllers/JobsController.html":{}}}],["cachettl(30",{"_index":244,"title":{},"body":{"controllers/JobsController.html":{}}}],["callhandler",{"_index":87,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["catch",{"_index":118,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(badrequestexception",{"_index":318,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["catch(exception",{"_index":119,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(httpexception",{"_index":125,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":21,"title":{"classes/HttpExceptionFilter.html":{},"classes/JobDTO.html":{},"classes/ValidationExceptionFilter.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":114,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JobDTO.html":{},"classes/ValidationExceptionFilter.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_jobsmodule",{"_index":258,"title":{},"body":{"modules/JobsModule.html":{},"overview.html":{}}}],["cluster_jobsmodule_providers",{"_index":259,"title":{},"body":{"modules/JobsModule.html":{},"overview.html":{}}}],["configure",{"_index":261,"title":{},"body":{"modules/JobsModule.html":{}}}],["configure(consumer",{"_index":262,"title":{},"body":{"modules/JobsModule.html":{}}}],["console.log('endpoint",{"_index":102,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["console.log('logging",{"_index":74,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["console.log('method",{"_index":104,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["console.log(`execution",{"_index":110,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["const",{"_index":98,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["constructor",{"_index":290,"title":{},"body":{"injectables/JobsService.html":{}}}],["constructor(@injectmodel('job",{"_index":302,"title":{},"body":{"injectables/JobsService.html":{}}}],["constructor(jobmodel",{"_index":291,"title":{},"body":{"injectables/JobsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/JobsController.html":{}}}],["consumer",{"_index":265,"title":{},"body":{"modules/JobsModule.html":{}}}],["context",{"_index":89,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["context.switchtohttp",{"_index":100,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/JobsController.html":{}},"body":{"controllers/AppController.html":{},"controllers/JobsController.html":{},"coverage.html":{}}}],["controller('jobs",{"_index":226,"title":{},"body":{"controllers/JobsController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"overview.html":{}}}],["core",{"_index":97,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["coverage",{"_index":349,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":166,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["create(@body(validationpipe",{"_index":246,"title":{},"body":{"controllers/JobsController.html":{}}}],["create(@jobdata(validationpipe",{"_index":248,"title":{},"body":{"controllers/JobsController.html":{}}}],["create(job",{"_index":171,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["created",{"_index":247,"title":{},"body":{"controllers/JobsController.html":{}}}],["created.'})@apiforbiddenresponse({description",{"_index":175,"title":{},"body":{"controllers/JobsController.html":{}}}],["createparamdecorator((data",{"_index":461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":99,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":101,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":127,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["data",{"_index":462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":134,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["date.now",{"_index":107,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{}}}],["default",{"_index":152,"title":{},"body":{"classes/JobDTO.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":75,"title":{},"body":{"injectables/AuditMiddleware.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["delete(':id",{"_index":254,"title":{},"body":{"controllers/JobsController.html":{}}}],["delete(':id')@apiokresponse({description",{"_index":180,"title":{},"body":{"controllers/JobsController.html":{}}}],["delete(@param('id",{"_index":256,"title":{},"body":{"controllers/JobsController.html":{}}}],["delete(id",{"_index":179,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":135,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"classes/ValidationExceptionFilter.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":408,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["dtos/job.dto",{"_index":207,"title":{},"body":{"controllers/JobsController.html":{}}}],["e2e",{"_index":419,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":395,"title":{},"body":{"index.html":{}}}],["error",{"_index":137,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors",{"_index":340,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":342,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["exception",{"_index":124,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.filter",{"_index":210,"title":{},"body":{"controllers/JobsController.html":{}}}],["exception.filter.ts",{"_index":116,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":123,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:12",{"_index":316,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.getstatus",{"_index":129,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exceptionfilter",{"_index":117,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["executioncontext",{"_index":86,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["expected",{"_index":150,"title":{},"body":{"classes/JobDTO.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"overview.html":{}}}],["express",{"_index":72,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["failed",{"_index":345,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["filters/http",{"_index":209,"title":{},"body":{"controllers/JobsController.html":{}}}],["find",{"_index":167,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["find(@param('id",{"_index":231,"title":{},"body":{"controllers/JobsController.html":{}}}],["find(id",{"_index":183,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["findall",{"_index":168,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["forbidden",{"_index":176,"title":{},"body":{"controllers/JobsController.html":{}}}],["forroutes",{"_index":285,"title":{},"body":{"modules/JobsModule.html":{}}}],["found",{"_index":237,"title":{},"body":{"controllers/JobsController.html":{}}}],["framework",{"_index":393,"title":{},"body":{"index.html":{}}}],["function",{"_index":63,"title":{},"body":{"injectables/AuditMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":387,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":230,"title":{},"body":{"controllers/JobsController.html":{}}}],["get(':id')@cachettl(30)@apiokresponse({description",{"_index":184,"title":{},"body":{"controllers/JobsController.html":{}}}],["get()@cachekey('alljobs')@cachettl(25)@apiokresponse({description",{"_index":187,"title":{},"body":{"controllers/JobsController.html":{}}}],["get()@render('jobs/index",{"_index":190,"title":{},"body":{"controllers/JobsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":389,"title":{"index.html":{}},"body":{}}],["grow",{"_index":426,"title":{},"body":{"index.html":{}}}],["handle",{"_index":108,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["hbs",{"_index":374,"title":{},"body":{"dependencies.html":{}}}],["headers",{"_index":80,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":437,"title":{},"body":{"index.html":{}}}],["host",{"_index":121,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":126,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["http",{"_index":136,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":120,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"classes/ValidationExceptionFilter.html":{}}}],["httpexception('job",{"_index":236,"title":{},"body":{"controllers/JobsController.html":{}}}],["httpexceptionfilter",{"_index":113,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":444,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":200,"title":{},"body":{"controllers/JobsController.html":{}}}],["httpstatus.not_found",{"_index":238,"title":{},"body":{"controllers/JobsController.html":{}}}],["id",{"_index":143,"title":{},"body":{"interfaces/Job.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["identifier",{"_index":351,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":73,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/JobsModule.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["injectable",{"_index":49,"title":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JobsService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JobsService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JobsService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectmodel",{"_index":301,"title":{},"body":{"injectables/JobsService.html":{}}}],["installation",{"_index":404,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":406,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":84,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["intercept(context",{"_index":85,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["interface",{"_index":138,"title":{"interfaces/Job.html":{}},"body":{"interfaces/Job.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":140,"title":{},"body":{"interfaces/Job.html":{}}}],["interfaces/job.interface",{"_index":208,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["ip",{"_index":76,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["isint",{"_index":159,"title":{},"body":{"classes/JobDTO.html":{}}}],["isstring",{"_index":155,"title":{},"body":{"classes/JobDTO.html":{}}}],["items",{"_index":282,"title":{},"body":{"modules/JobsModule.html":{}}}],["job",{"_index":139,"title":{"interfaces/Job.html":{}},"body":{"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"coverage.html":{}}}],["jobdata",{"_index":213,"title":{},"body":{"controllers/JobsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jobdto",{"_index":147,"title":{"classes/JobDTO.html":{}},"body":{"classes/JobDTO.html":{},"controllers/JobsController.html":{},"coverage.html":{}}}],["jobmodel",{"_index":294,"title":{},"body":{"injectables/JobsService.html":{}}}],["jobs",{"_index":165,"title":{},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{}}}],["jobs.controller",{"_index":268,"title":{},"body":{"modules/JobsModule.html":{}}}],["jobs.service",{"_index":206,"title":{},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{}}}],["jobs/jobs.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["jobschema",{"_index":269,"title":{},"body":{"modules/JobsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jobscontroller",{"_index":162,"title":{"controllers/JobsController.html":{}},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{},"coverage.html":{}}}],["jobsmodule",{"_index":39,"title":{"modules/JobsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"modules.html":{},"overview.html":{}}}],["jobsservice",{"_index":205,"title":{"injectables/JobsService.html":{}},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"coverage.html":{},"overview.html":{}}}],["join",{"_index":433,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":441,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"overview.html":{}}}],["license",{"_index":447,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":423,"title":{},"body":{"index.html":{}}}],["list",{"_index":188,"title":{},"body":{"controllers/JobsController.html":{}}}],["manager",{"_index":219,"title":{},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{},"dependencies.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":279,"title":{},"body":{"modules/JobsModule.html":{}}}],["maximum",{"_index":281,"title":{},"body":{"modules/JobsModule.html":{}}}],["metadata",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":325,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":286,"title":{},"body":{"modules/JobsModule.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["middlewareconsumer",{"_index":263,"title":{},"body":{"modules/JobsModule.html":{}}}],["middlewares/audit.middleware",{"_index":271,"title":{},"body":{"modules/JobsModule.html":{}}}],["miscellaneous",{"_index":386,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":422,"title":{},"body":{"index.html":{}}}],["mode",{"_index":412,"title":{},"body":{"index.html":{}}}],["model",{"_index":292,"title":{},"body":{"injectables/JobsService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/JobsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":300,"title":{},"body":{"injectables/JobsService.html":{},"dependencies.html":{}}}],["mongoose.schema",{"_index":465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{}}}],["mongoosemodule.forfeature",{"_index":273,"title":{},"body":{"modules/JobsModule.html":{}}}],["mongoosemodule.forroot('mongodb://127.0.0.1:27017/jobs",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":436,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":442,"title":{},"body":{"index.html":{}}}],["name",{"_index":66,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["nest",{"_index":400,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":446,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":91,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["nestjs/cache",{"_index":218,"title":{},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":158,"title":{},"body":{"classes/JobDTO.html":{},"controllers/JobsController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":71,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["nestmodule",{"_index":266,"title":{},"body":{"modules/JobsModule.html":{}}}],["new",{"_index":133,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newjob",{"_index":308,"title":{},"body":{"injectables/JobsService.html":{}}}],["newjob.save",{"_index":310,"title":{},"body":{"injectables/JobsService.html":{}}}],["next",{"_index":62,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{}}}],["node.js",{"_index":392,"title":{},"body":{"index.html":{}}}],["now",{"_index":106,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["now}ms",{"_index":112,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["npm",{"_index":405,"title":{},"body":{"index.html":{}}}],["number",{"_index":146,"title":{},"body":{"interfaces/Job.html":{},"classes/JobDTO.html":{},"modules/JobsModule.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":338,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["observable",{"_index":90,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["open",{"_index":424,"title":{},"body":{"index.html":{}}}],["optional",{"_index":68,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["out",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"overview.html":{}}}],["overview",{"_index":451,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":364,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":198,"title":{},"body":{"controllers/JobsController.html":{}}}],["parameters",{"_index":65,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["path",{"_index":78,"title":{},"body":{"injectables/AuditMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"modules/JobsModule.html":{},"classes/ValidationExceptionFilter.html":{}}}],["pipe(tap",{"_index":109,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["pipes/validation.pipe",{"_index":212,"title":{},"body":{"controllers/JobsController.html":{}}}],["pipetransform",{"_index":333,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoinstance",{"_index":335,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoinstance(metatype",{"_index":339,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":434,"title":{},"body":{"index.html":{}}}],["position",{"_index":151,"title":{},"body":{"classes/JobDTO.html":{}}}],["post",{"_index":196,"title":{},"body":{"controllers/JobsController.html":{}}}],["post()@usefilters(httpexceptionfilter)@apicreatedresponse({description",{"_index":172,"title":{},"body":{"controllers/JobsController.html":{}}}],["prefix",{"_index":164,"title":{},"body":{"controllers/JobsController.html":{}}}],["private",{"_index":303,"title":{},"body":{"injectables/JobsService.html":{},"injectables/ValidationPipe.html":{}}}],["production",{"_index":414,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":391,"title":{},"body":{"index.html":{}}}],["project",{"_index":425,"title":{},"body":{"index.html":{}}}],["promise",{"_index":178,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["properties",{"_index":142,"title":{"properties.html":{}},"body":{"interfaces/Job.html":{},"classes/JobDTO.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"overview.html":{}}}],["pug",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["put",{"_index":197,"title":{},"body":{"controllers/JobsController.html":{}}}],["put(':id",{"_index":250,"title":{},"body":{"controllers/JobsController.html":{}}}],["put(':id')@apiokresponse({description",{"_index":193,"title":{},"body":{"controllers/JobsController.html":{}}}],["read",{"_index":435,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["reflect",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["removed",{"_index":255,"title":{},"body":{"controllers/JobsController.html":{}}}],["removed.'})@apiforbiddenresponse({description",{"_index":181,"title":{},"body":{"controllers/JobsController.html":{}}}],["render",{"_index":204,"title":{},"body":{"controllers/JobsController.html":{}}}],["render('jobs/index",{"_index":239,"title":{},"body":{"controllers/JobsController.html":{}}}],["repository",{"_index":403,"title":{},"body":{"index.html":{}}}],["req",{"_index":69,"title":{},"body":{"injectables/AuditMiddleware.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body[data",{"_index":464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers",{"_index":81,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["req.ip",{"_index":77,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["req.path",{"_index":79,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["request",{"_index":59,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["request.method",{"_index":105,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["request.url",{"_index":103,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["requestmethod",{"_index":267,"title":{},"body":{"modules/JobsModule.html":{}}}],["requestmethod.delete",{"_index":287,"title":{},"body":{"modules/JobsModule.html":{}}}],["res",{"_index":60,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["reset",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"overview.html":{}}}],["resource",{"_index":173,"title":{},"body":{"controllers/JobsController.html":{}}}],["response",{"_index":61,"title":{},"body":{"injectables/AuditMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["response.status(status).json",{"_index":130,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["result",{"_index":234,"title":{},"body":{"controllers/JobsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BenchmarkInterceptor.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":242,"title":{},"body":{"controllers/JobsController.html":{}}}],["returned.'})@apiforbiddenresponse({description",{"_index":185,"title":{},"body":{"controllers/JobsController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["root",{"_index":169,"title":{},"body":{"controllers/JobsController.html":{}}}],["run",{"_index":409,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":92,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":94,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["salary",{"_index":144,"title":{},"body":{"interfaces/Job.html":{},"classes/JobDTO.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":396,"title":{},"body":{"index.html":{}}}],["schema",{"_index":274,"title":{},"body":{"modules/JobsModule.html":{}}}],["schemas/job.schema",{"_index":270,"title":{},"body":{"modules/JobsModule.html":{}}}],["seconds",{"_index":278,"title":{},"body":{"modules/JobsModule.html":{}}}],["serve",{"_index":95,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["server",{"_index":397,"title":{},"body":{"index.html":{}}}],["side",{"_index":398,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":428,"title":{},"body":{"index.html":{}}}],["src/.../job.schema.ts",{"_index":460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jobdata.decorator.ts",{"_index":459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":388,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":52,"title":{},"body":{"injectables/AppService.html":{}}}],["src/decorators/jobdata.decorator",{"_index":214,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/decorators/jobdata.decorator.ts",{"_index":354,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/filters/http",{"_index":115,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/filters/validation",{"_index":315,"title":{},"body":{"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["src/interceptors/benchmark.interceptor",{"_index":220,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/interceptors/benchmark.interceptor.ts",{"_index":83,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/benchmark.interceptor.ts:13",{"_index":88,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["src/jobs/dtos/job.dto.ts",{"_index":148,"title":{},"body":{"classes/JobDTO.html":{},"coverage.html":{}}}],["src/jobs/dtos/job.dto.ts:11",{"_index":156,"title":{},"body":{"classes/JobDTO.html":{}}}],["src/jobs/dtos/job.dto.ts:19",{"_index":154,"title":{},"body":{"classes/JobDTO.html":{}}}],["src/jobs/interfaces/job.interface.ts",{"_index":141,"title":{},"body":{"interfaces/Job.html":{},"coverage.html":{}}}],["src/jobs/jobs.controller.ts",{"_index":163,"title":{},"body":{"controllers/JobsController.html":{},"coverage.html":{}}}],["src/jobs/jobs.controller.ts:101",{"_index":195,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:110",{"_index":182,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:57",{"_index":191,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:70",{"_index":189,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:80",{"_index":186,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:92",{"_index":177,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.module.ts",{"_index":260,"title":{},"body":{"modules/JobsModule.html":{}}}],["src/jobs/jobs.module.ts:26",{"_index":264,"title":{},"body":{"modules/JobsModule.html":{}}}],["src/jobs/jobs.service.ts",{"_index":288,"title":{},"body":{"injectables/JobsService.html":{},"coverage.html":{}}}],["src/jobs/jobs.service.ts:10",{"_index":298,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/jobs/jobs.service.ts:14",{"_index":297,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/jobs/jobs.service.ts:18",{"_index":295,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/jobs/jobs.service.ts:23",{"_index":299,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/jobs/jobs.service.ts:27",{"_index":296,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/jobs/jobs.service.ts:7",{"_index":293,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/jobs/schemas/job.schema.ts",{"_index":360,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":361,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middlewares/audit.middleware.ts",{"_index":56,"title":{},"body":{"injectables/AuditMiddleware.html":{},"coverage.html":{}}}],["src/middlewares/audit.middleware.ts:6",{"_index":64,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["src/pipes/validation.pipe.ts",{"_index":320,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/pipes/validation.pipe.ts:12",{"_index":330,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/pipes/validation.pipe.ts:24",{"_index":324,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["start",{"_index":410,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":413,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":415,"title":{},"body":{"index.html":{}}}],["started",{"_index":390,"title":{"index.html":{}},"body":{}}],["starter",{"_index":402,"title":{},"body":{"index.html":{}}}],["statements",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":96,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["status",{"_index":128,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["statuscode",{"_index":131,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["stay",{"_index":438,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":174,"title":{},"body":{"controllers/JobsController.html":{}}}],["support",{"_index":429,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":449,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":93,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["test",{"_index":418,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":421,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":420,"title":{},"body":{"index.html":{}}}],["tests",{"_index":417,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":427,"title":{},"body":{"index.html":{}}}],["then((result",{"_index":233,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.jobmodel(job",{"_index":309,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.jobmodel.find",{"_index":305,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.jobmodel.findbyidandremove(id",{"_index":313,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.jobmodel.findbyidandupdate(id",{"_index":311,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.jobmodel.findone",{"_index":306,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.jobsservice",{"_index":232,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.create(job",{"_index":249,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.delete(id",{"_index":257,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.find(id",{"_index":245,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.findall",{"_index":243,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.update(id",{"_index":253,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.tovalidate(metatype",{"_index":337,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["throw",{"_index":235,"title":{},"body":{"controllers/JobsController.html":{},"injectables/ValidationPipe.html":{}}}],["time",{"_index":111,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["timestamp",{"_index":132,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["title",{"_index":145,"title":{},"body":{"interfaces/Job.html":{},"classes/JobDTO.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":439,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":321,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":323,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":322,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":327,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":336,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":312,"title":{},"body":{"injectables/JobsService.html":{}}}],["ttl",{"_index":276,"title":{},"body":{"modules/JobsModule.html":{}}}],["twitter",{"_index":445,"title":{},"body":{"index.html":{}}}],["type",{"_index":67,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Job.html":{},"classes/JobDTO.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/ValidationExceptionFilter.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["types",{"_index":346,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":348,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":401,"title":{},"body":{"index.html":{}}}],["ui",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":328,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["unit",{"_index":416,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":332,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["unlicensed",{"_index":457,"title":{},"body":{"properties.html":{}}}],["update",{"_index":170,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["update(@param('id",{"_index":252,"title":{},"body":{"controllers/JobsController.html":{}}}],["update(id",{"_index":192,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["updated",{"_index":251,"title":{},"body":{"controllers/JobsController.html":{}}}],["updated.'})@apiforbiddenresponse({description",{"_index":194,"title":{},"body":{"controllers/JobsController.html":{}}}],["use",{"_index":57,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["use(req",{"_index":58,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["usefilters",{"_index":202,"title":{},"body":{"controllers/JobsController.html":{}}}],["usefilters(httpexceptionfilter",{"_index":228,"title":{},"body":{"controllers/JobsController.html":{}}}],["useinterceptors",{"_index":203,"title":{},"body":{"controllers/JobsController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":227,"title":{},"body":{"controllers/JobsController.html":{}}}],["usepipes",{"_index":201,"title":{},"body":{"controllers/JobsController.html":{}}}],["usepipes(validationpipe",{"_index":229,"title":{},"body":{"controllers/JobsController.html":{}}}],["validate",{"_index":334,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":341,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationexceptionfilter",{"_index":314,"title":{"classes/ValidationExceptionFilter.html":{}},"body":{"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["validationpipe",{"_index":211,"title":{"injectables/ValidationPipe.html":{}},"body":{"controllers/JobsController.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":160,"title":{},"body":{"classes/JobDTO.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":331,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":458,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":455,"title":{},"body":{"properties.html":{}}}],["void",{"_index":70,"title":{},"body":{"injectables/AuditMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"modules/JobsModule.html":{},"classes/ValidationExceptionFilter.html":{}}}],["watch",{"_index":411,"title":{},"body":{"index.html":{}}}],["website",{"_index":443,"title":{},"body":{"index.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":432,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nJobsModule\n\nJobsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nJobsModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            JobsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JobsModule } from './jobs/jobs.module';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    JobsModule,\n    MongooseModule.forRoot('mongodb://127.0.0.1:27017/jobs'),\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditMiddleware.html":{"url":"injectables/AuditMiddleware.html","title":"injectable - AuditMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/audit.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/middlewares/audit.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Injectable()\nexport class AuditMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: Function) {\n    console.log('Logging DELETE request IP', req.ip);\n    console.log('Logging DELETE request PATH', req.path);\n    console.log('Logging DELETE request HEADERS', req.headers);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BenchmarkInterceptor.html":{"url":"injectables/BenchmarkInterceptor.html","title":"injectable - BenchmarkInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BenchmarkInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/benchmark.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/benchmark.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Request } from 'express-serve-static-core';\n\n@Injectable()\nexport class BenchmarkInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const ctx = context.switchToHttp();\n    const request: Request = ctx.getRequest();\n\n    console.log('Endpoint: ', request.url);\n    console.log('Method: ', request.method);\n\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`Execution time ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      description: 'Http Error',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Job.html":{"url":"interfaces/Job.html","title":"interface - Job","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Job\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/interfaces/job.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            salary\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        salary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        salary:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Job {\n  id?: string;\n  title: string;\n  salary: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JobDTO.html":{"url":"classes/JobDTO.html","title":"class - JobDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JobDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/dtos/job.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                salary\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        salary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'The expected salary of the job position', default: 3000})@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dtos/job.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The title of the job position', default: ''})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dtos/job.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsInt } from 'class-validator';\n\nexport class JobDTO {\n  @ApiProperty({\n    type: String,\n    description: 'The title of the job position',\n    default: '',\n  })\n  @IsString()\n  readonly title: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'The expected salary of the job position',\n    default: 3000,\n  })\n  @IsInt()\n  readonly salary: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/JobsController.html":{"url":"controllers/JobsController.html","title":"controller - JobsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  JobsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/jobs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                jobs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                find\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                root\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(job: JobDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseFilters(HttpExceptionFilter)@ApiCreatedResponse({description: 'The resource has been successfully created.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                                JobDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse({description: 'The resource has been successfully removed.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@CacheTTL(30)@ApiOkResponse({description: 'The resource has been successfully returned.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@CacheKey('allJobs')@CacheTTL(25)@ApiOkResponse({description: 'The resource list has been successfully returned.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        root\n                        \n                    \n                \n            \n            \n                \n                    \n                    root()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Render('jobs/index')\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, job: JobDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({description: 'The resource has been successfully updated.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    job\n                                    \n                                                JobDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Param,\n  Body,\n  // HttpException,\n  // HttpStatus,\n  // UsePipes,\n  UseFilters,\n  UseInterceptors,\n  Render,\n} from '@nestjs/common';\nimport { JobsService } from './jobs.service';\nimport { JobDTO } from './dtos/job.dto';\nimport { Job } from './interfaces/job.interface';\nimport { HttpExceptionFilter } from '../filters/http-exception.filter';\nimport { ValidationPipe } from '../pipes/validation.pipe';\nimport { JobData } from 'src/decorators/jobdata.decorator';\nimport { CacheInterceptor, CacheKey, CacheTTL } from '@nestjs/cache-manager';\nimport { BenchmarkInterceptor } from 'src/interceptors/benchmark.interceptor';\nimport {\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@ApiTags('jobs')\n@Controller('jobs')\n@UseInterceptors(CacheInterceptor, BenchmarkInterceptor)\n// @UseFilters(HttpExceptionFilter)\n// @UsePipes(ValidationPipe)\nexport class JobsController {\n  constructor(private readonly jobsService: JobsService) {}\n\n  // @Get(':id')\n  // find(@Param('id') id): Promise {\n  //   return this.jobsService\n  //     .find(id)\n  //     .then((result) => {\n  //       if (result) {\n  //         return result;\n  //       } else {\n  //         throw new HttpException('Job not found', HttpStatus.NOT_FOUND);\n  //       }\n  //     })\n  //     .catch(() => {\n  //       throw new HttpException('Job not found', HttpStatus.NOT_FOUND);\n  //     });\n  // }\n\n  @Get()\n  @Render('jobs/index')\n  root() {\n    return this.jobsService\n      .findAll()\n      .then((result) => (result ? { jobs: result } : { jobs: [] }));\n  }\n\n  @Get()\n  @CacheKey('allJobs')\n  @CacheTTL(25)\n  @ApiOkResponse({\n    description: 'The resource list has been successfully returned.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  findAll(): Promise {\n    return this.jobsService.findAll();\n  }\n\n  @Get(':id')\n  @CacheTTL(30)\n  @ApiOkResponse({\n    description: 'The resource has been successfully returned.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  find(@Param('id') id: string): Promise {\n    return this.jobsService.find(id);\n  }\n\n  @Post()\n  // @UsePipes(ValidationPipe)\n  // create(@Body(ValidationPipe) job: JobDTO): Promise\n  @UseFilters(HttpExceptionFilter)\n  @ApiCreatedResponse({\n    description: 'The resource has been successfully created.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  create(@JobData(ValidationPipe) job: JobDTO): Promise {\n    return this.jobsService.create(job);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({\n    description: 'The resource has been successfully updated.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  update(@Param('id') id: string, @Body() job: JobDTO): Promise {\n    return this.jobsService.update(id, job);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse({\n    description: 'The resource has been successfully removed.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  delete(@Param('id') id: string): Promise {\n    return this.jobsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JobsModule.html":{"url":"modules/JobsModule.html","title":"module - JobsModule","body":"\n                   \n\n\n\n\n    Modules\n    JobsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JobsModule\n\n\n\ncluster_JobsModule_providers\n\n\n\n\nJobsService\n\nJobsService\n\n\n\nJobsModule\n\nJobsModule\n\nJobsModule -->\n\nJobsService->JobsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/jobs/jobs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JobsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            JobsController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/jobs/jobs.module.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { JobsController } from './jobs.controller';\nimport { JobsService } from './jobs.service';\nimport { JobSchema } from './schemas/job.schema';\nimport { AuditMiddleware } from '../middlewares/audit.middleware';\nimport { CacheModule } from '@nestjs/cache-manager';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Job', schema: JobSchema }]),\n    CacheModule.register({\n      ttl: 5, // seconds\n      max: 100, // maximum number of items in cache\n    }),\n  ],\n  controllers: [JobsController],\n  providers: [JobsService],\n})\nexport class JobsModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(AuditMiddleware)\n      .forRoutes({ path: 'jobs/*', method: RequestMethod.DELETE });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JobsService.html":{"url":"injectables/JobsService.html","title":"injectable - JobsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JobsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/jobs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jobModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/jobs/jobs.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jobModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(job: Job)\n                \n            \n\n\n            \n                \n                    Defined in src/jobs/jobs.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                                Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jobs/jobs.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jobs/jobs.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/jobs/jobs.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, job: Job)\n                \n            \n\n\n            \n                \n                    Defined in src/jobs/jobs.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    job\n                                    \n                                                Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Job } from './interfaces/job.interface';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\n\n@Injectable()\nexport class JobsService {\n  constructor(@InjectModel('Job') private readonly jobModel: Model) {}\n\n  async findAll(): Promise {\n    return await this.jobModel.find({});\n  }\n\n  async find(id: string): Promise {\n    return await this.jobModel.findOne({ _id: id });\n  }\n\n  async create(job: Job): Promise {\n    const newJob = new this.jobModel(job);\n    return await newJob.save();\n  }\n\n  async update(id: string, job: Job): Promise {\n    return await this.jobModel.findByIdAndUpdate(id, job, { new: true });\n  }\n\n  async delete(id: string): Promise {\n    return await this.jobModel.findByIdAndRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationExceptionFilter.html":{"url":"classes/ValidationExceptionFilter.html","title":"class - ValidationExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/validation-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/validation-exception.filter.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(BadRequestException)\nexport class ValidationExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      description: 'Bad Request!',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validation.pipe.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validation.pipe.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToInstance(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: any): boolean {\n    const types: any[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/decorators/jobdata.decorator.ts\n            \n            variable\n            JobData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/filters/validation-exception.filter.ts\n            \n            class\n            ValidationExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/benchmark.interceptor.ts\n            \n            injectable\n            BenchmarkInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/jobs/dtos/job.dto.ts\n            \n            class\n            JobDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/jobs/interfaces/job.interface.ts\n            \n            interface\n            Job\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/jobs/jobs.controller.ts\n            \n            controller\n            JobsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/jobs/jobs.service.ts\n            \n            injectable\n            JobsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/jobs/schemas/job.schema.ts\n            \n            variable\n            JobSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middlewares/audit.middleware.ts\n            \n            injectable\n            AuditMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^2.1.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mongoose : ^10.0.1\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.8\n        \n            cache-manager : ^5.2.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            hbs : ^4.2.0\n        \n            mongoose : ^7.4.4\n        \n            pug : ^3.0.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JobsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_JobsModule\n\n\n\ncluster_JobsModule_providers\n\n\n\n\nJobsModule\n\nJobsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nJobsModule->AppModule\n\n\n\n\n\nJobsService\n\nJobsService\n\nJobsModule -->\n\nJobsService->JobsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JobData   (src/.../jobdata.decorator.ts)\n                        \n                        \n                            JobSchema   (src/.../job.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/jobdata.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JobData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: string, req) => {\n  return data ? req.body && req.body[data] : req.body;\n})\n                    \n                \n\n\n        \n    \n\n    src/jobs/schemas/job.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JobSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema({\n  title: String,\n  salary: Number,\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
